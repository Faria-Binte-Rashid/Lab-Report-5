import random

N = 8  

def random_board():
    return [random.randint(0, N-1) for _ in range(N)]

def fitness(board):
    clashes = 0
    for i in range(N):
        for j in range(i+1, N):
            if board[i] == board[j] or abs(board[i]-board[j]) == abs(i-j):
                clashes += 1
    return ((N*(N-1))//2) - clashes  

def crossover(parent1, parent2):
    point = random.randint(0, N-1)
    child = parent1[:point] + parent2[point:]
    return child

def mutate(board):
    if random.random() < 0.3:  
        idx = random.randint(0, N-1)
        board[idx] = random.randint(0, N-1)
    return board


population = [random_board() for _ in range(100)]
generation = 0
max_fitness = (N*(N-1))//2  

while True:
    population = sorted(population, key=lambda x: fitness(x), reverse=True)
    if fitness(population[0]) == max_fitness:
        break

    new_population = []
    top_half = population[:50]  

    for _ in range(100):
        parent1 = random.choice(top_half)
        parent2 = random.choice(top_half)
        child = crossover(parent1, parent2)
        child = mutate(child)
        new_population.append(child)

    population = new_population
    generation += 1

   
    print(f"Generation: {generation}, Fittest: {fitness(population[0])}")


print("\nSolution found in generation", generation)
print("Fitness:", fitness(population[0]))
print("Board Configuration:")
solution = population[0]
for row in range(N):
    line = ""
    for col in range(N):
        if solution[col] == row:
            line += " Q "
        else:
            line += " . "
    print(line)
